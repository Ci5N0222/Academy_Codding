[ 1주차 복습 ] - 객체지향
- 클래스 / 인스턴트
클래스:
    - 정보은닉(private), getter&setter, constructor, default constructor, this
인스턴스:
    - new로 생성 ==> Test test = new Test();
외부라이브러리:
    - 필요시 추가, 예: jlayer, robot, ftp4j, jfugue 등등
클래스 및 인스턴스 이해 심화 실습:
    - 학생관리 시스템
    - 영화관리 시스템
    - 상품관리 시스템
Refactoring:
    - 성능, 가독성 등을 위해 코드를 수정하는 일
    - 주로 SM에서 하는 일
Design Patten:
    - MVC (Model View Control)
        . View: 시각적으로 보여지는 코드의 집합
        . Model: 데이터 관리만을 위해 존재하는 클래스


[2주차 학습내용]
클래스: 상속, 다형성, 추상화, 컬렉션

====================================================================================================================

[ 상속 ]
** 평범한 관계: has- a 포함 관계
A is a B ( IS - A 관계 ): A는 B이다.
ex --> Bear is a [ animal ]
       Lion is a [ animal ]

[상속 문법]
public class A extends B (extends: 확장하다)
    - B에 있는 내용을 A에 사용하다.
    - A는 비어있는 클래스여도 B에 작성된 내용을 사용할 수 있다.
    - 추가 사항이 있을 시 B에서만 작성하면 상속받는 모든 A class들이 사용할 수 있어 유지보수가 용이하다.
    - B는 부모, 상위(super) Class 이고 A는 자식, 하위(derived) Class 이다.
    - 상속은 하나의 클래스만 가능하다 (A extends B, C 는 불가능)
    - A를 상속받은 B를 받속받은 C를 만드는 다중 상속은 가능

* 자식, 하위 클래스에서 constructor를 사용하는 방법
    1. Setter 사용
    2. 접근제한자 변경: super class의 private를 변경
    3. 부모 클래스의 super constructor 사용

* 부모 클래스의 매개변수를 받아주는 constructor가 있지만 자식 클래스에 constructor가 없는 경우 오류 발생
    - 자식클래스의 인스턴스를 실행하면 부모 클래스의 constructor가 반드시 실행된다.
    - 매개변수가 없는 constructor가 지워지면서 constructor가 없는 자식 클래스에서 오류가 발생한다.
    - default constructor를 만들어 오류를 방지한다.

* 메서드 오버라이딩: 부모 클래스가 상속한 메서드를 자식 클래스에서 메서드를 재정의 하는 것
    - override: 무효화 시키다.
    . 부모 :  public double getBonus(){ return this.point * 0.03}
    . 자식 :  public double getBonus(){ return this.getBonus() * 0.02} <-- 부모 클래스의 메서드를 그대로 사용하지 않고 재정의 함

====================================================================================================================

[ 추상 ]
abstract: 추상적인

[ 추상 문법 ]
추상 클래스: abstract public class Member {}
    - 인스턴스를 만들 수 없게 된다.
    - 상속을 위해 만들어진 클래스이기에 인스턴스를 만들 필요가 없다.
추상 메서드: abstract public double getBonus();
    - 내용이 없으므로 일반 클래스에서 거부당한다.
    - 상속 받은 자식 클래스에서 override를 꼭 해야한다.

* 추상메서드를 사용하기 위해선 클래스도 추상 클래스로 만들어야 한다.
* 상속을 목적으로 만든 었으며, 인스턴스 시킬 필요가 없는 클래스
* 추상 메서드를 상속 받기 위해선
    1. 클래스를 추상 클래스로 만든다. --> 해당 클래스를 인스턴스로 사용하기 위함이므로 부적합
    2. 추상 메서드를 오버라이딩하여 내용을 재정의 한다.
    - 오류를 발생시켜 메서드 재정의를 강제적으로 할 수 있게 한다.

====================================================================================================================

[ 다형성 ]
다형성 (메타몽):
    - 형상이 많은 성질
    - is - a 상속관계에 놓인 두 클래스 중, 부모 클래스 참조변수에 발현되는 성질
    - 상속관계의 클래스에서 부모클래스 참조변수는 자신을 상속받는 자식 클래스 인스턴스의
      주소를 저장할 수 있는 성질
    - A를 상속받은 B를 받속받은 C를 만드는 다중 상속도 다형성을 가진다.
    - 부모 클래스 참조변수에 자식 클래스 인스턴스의 주소를 저장했을 때, 기본적으로 참조변수의 타입만
      접근 가능하다. 만약 저장된 인스턴스의 모든 것을 사용해야 한다면 DownCasting이 필요하다.

* 예외 사항: 다운캐스팅 없이 사용 가능한 메서드
    - 오버라이딩, 임플리먼츠 된 메서드

====================================================================================================================

객체지향(OOP)
상속, 추상화, 다형성, 캡슐화

추상화: 하위 요소의 공통점들을 상위 요소로 추려내는 과정
    - 대상을 일반화 하는 과정이며, 점점 추상화 될 수록 본래의 형태가 떠오르지 않게 된다.
    - Why 추상화?
        . 개발 속도를 빠르게 하기 위해
        . 하위 요소를 만들 때 상위 요소를 상속할 수 있게 만듦
    - 예: 승용차, 벤, 트럭, 버스 --> 자동차

상속: 상위 요소의 내용을 하위 요소가 물려받아 변경/확장 하는 것이 가능하도록 만드는 기술
    - 공통된 기능들은 상위 요소를 만들 때 미리 구현하기 때문에 개발 속도가 빠름
        - 공통기능을 미리 개발해두고 상속을 통해 빠르게 구조를 확장할 수 있다.
    - 작은 규모를 만들 때는 비효율적이지만 기능이 늘어날 수록 효율적이다.
    - 예: 휴대폰 --> 아이폰

다형성: 상속과 재정의를 전제조건으로 하여 상위 요소가 다양한 하위 요소를 통합하여 사용하는 기술
    - 다양한 하위 요소 객체를 보관할 수 있는 성질을 다형성이라고 한다.
    - 예: 캐릭터(전사, 마법사, 암살자), 몬스터(뱀파이어, 서큐버스)

====================================================================================================================

* 중급 문법
- 상속 ( 코드 중복 제거 + 다형성 )
- 다형성 ( 코드 결합도를 낮춤 )

컴파일
런타임

DTO: Data Transfer Object
    - 목적: 계층별 데이터 전송에 사용되는 객체

DAO: Data Access Object
    - 목적: CRUD를 위해 접근 (Access)


* Melon 관리 시스템
1. 신규 음악 등록
2. 음악 목록 출력
3. 음악 검색 (제목으로 검색)
4. 항목 삭제 (ID로 삭제)
5. 항목 수정 (ID로 수정/ ID를 제외한 전체 항목 수정)
6. 시스템 종료

조건 1. MVC 패턴에서 MV 기반으로 작성할 것
필요 클래스
1. main.Main class (view)
2. dao.MusicDAO clas
s (model)
    - 멤버필드: 데이터 저장용 컬렉션
    - 멤버메서드: 입력, 수정, 삭제, 조회, 검색 (DAO 에서 검색을 수행한 결과만 Main으로 반환)
3. dto.musicDTO class ()
    - 멤버필드:
        . id / title / singer
    - 멤버메서드:
        . getter / setter / constructor / default constructor

출력 형식
ID / 제목 / 가수
1001 / 좋은날 / 아이유
1002 ...

* option
    - DTO write_date 추가
    - 출력시 날짜까지 출력